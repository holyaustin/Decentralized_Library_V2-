{"ast":null,"code":"import _defineProperty from \"/home/augustine/Dapps/DL/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/augustine/Dapps/DL/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/augustine/Dapps/DL/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable consistent-return */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable no-shadow */\nimport React, { useState } from \"react\"; //import { NFTStorage } from \"nft.storage\";\n\nimport { NFTStorage } from \"nft.storage/dist/bundle.esm.min.cjs\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\"; // import NFTMarketplace from \"../utils/NFTMarketplace.json\";\n\nimport { marketplaceAddress } from \"../config\"; // eslint-disable-next-line max-len\n\nvar APIKEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDA4Zjc4ODAwMkUzZDAwNEIxMDI3NTFGMUQ0OTJlNmI1NjNFODE3NmMiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MzA1NjE4NzM4MCwibmFtZSI6InBlbnNpb25maSJ9.agI-2V-FeK_eVRAZ-T6KGGfE9ltWrTUQ7brFzzYVwdM\";\n\nvar MintProfile = function MintProfile() {\n  var _useState = useState(null),\n      errorMessage = _useState[0],\n      setErrorMessage = _useState[1];\n\n  var _useState2 = useState(),\n      uploadedFile = _useState2[0],\n      setUploadedFile = _useState2[1];\n\n  var _useState3 = useState(),\n      imageView = _useState3[0],\n      setImageView = _useState3[1];\n\n  var _useState4 = useState(),\n      metaDataURL = _useState4[0],\n      setMetaDataURl = _useState4[1];\n\n  var _useState5 = useState(),\n      txURL = _useState5[0],\n      setTxURL = _useState5[1];\n\n  var _useState6 = useState(),\n      txStatus = _useState6[0],\n      setTxStatus = _useState6[1];\n\n  var _useState7 = useState({\n    name: \"\",\n    description: \"\"\n  }),\n      formInput = _useState7[0],\n      updateFormInput = _useState7[1];\n\n  var handleFileUpload = function handleFileUpload(event) {\n    console.log(\"file is uploaded\");\n    setUploadedFile(event.target.files[0]);\n    setTxStatus(\"\");\n    setImageView(\"\");\n    setMetaDataURl(\"\");\n    setTxURL(\"\");\n  };\n\n  var uploadNFTContent = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputFile) {\n      var name, description, nftStorage, metaData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = formInput.name, description = formInput.description;\n\n              if (!(!name || !description || !inputFile)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              nftStorage = new NFTStorage({\n                token: APIKEY\n              });\n              _context.prev = 4;\n              setTxStatus(\"Uploading NFT to IPFS & Filecoin via NFT.storage.\");\n              _context.next = 8;\n              return nftStorage.store({\n                name: name,\n                // \"PensionFi Profile NFT\",\n                description: description,\n                // \"This is PensionFi user profile Registration.\",\n                image: inputFile\n              });\n\n            case 8:\n              metaData = _context.sent;\n              setMetaDataURl(getIPFSGatewayURL(metaData.url));\n              console.log(\"metadata url: \", {\n                metaData: metaData\n              });\n              return _context.abrupt(\"return\", metaData);\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](4);\n              setErrorMessage(\"Could not save NFT to NFT.Storage - Aborted minting.\");\n              console.log(\"Error Uploading Content\", _context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 14]]);\n    }));\n\n    return function uploadNFTContent(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var sendTxToBlockchain = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(metadata) {\n      var web3Modal, connection, provider, connectedContract, mintNFTTx;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              setTxStatus(\"Sending mint transaction to Polygon Mumbai Blockchain.\");\n              web3Modal = new Web3Modal();\n              _context2.next = 5;\n              return web3Modal.connect();\n\n            case 5:\n              connection = _context2.sent;\n              provider = new ethers.providers.Web3Provider(connection);\n              connectedContract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, provider.getSigner());\n              _context2.next = 10;\n              return connectedContract.createToken(metadata.url);\n\n            case 10:\n              mintNFTTx = _context2.sent;\n              return _context2.abrupt(\"return\", mintNFTTx);\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              setErrorMessage(\"Failed to send tx to Polygon Mumbai.\");\n              console.log(_context2.t0);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 14]]);\n    }));\n\n    return function sendTxToBlockchain(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var previewNFT = function previewNFT(metaData, mintNFTTx) {\n    var imgViewString = getIPFSGatewayURL(metaData.data.image.pathname);\n    setImageView(imgViewString);\n    setMetaDataURl(getIPFSGatewayURL(metaData.url));\n    setTxURL(\"https://mumbai.polygonscan.com/tx/\".concat(mintNFTTx.hash));\n    setTxStatus(\"Profile created successfully!\");\n  };\n\n  var mintNFTToken = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event, uploadedFile) {\n      var metaData, mintNFTTx;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              event.preventDefault(); // 1. upload NFT content via NFT.storage\n\n              _context3.next = 3;\n              return uploadNFTContent(uploadedFile);\n\n            case 3:\n              metaData = _context3.sent;\n              _context3.next = 6;\n              return sendTxToBlockchain(metaData);\n\n            case 6:\n              mintNFTTx = _context3.sent;\n              // 3. preview the minted nft\n              previewNFT(metaData, mintNFTTx);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function mintNFTToken(_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getIPFSGatewayURL = function getIPFSGatewayURL(ipfsURL) {\n    var urlArray = ipfsURL.split(\"/\");\n    var ipfsGateWayURL = \"https://\".concat(urlArray[2], \".ipfs.dweb.link/\").concat(urlArray[3]);\n    return ipfsGateWayURL;\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"text-4xl text-center text-white font-bold mt-10 mb-20\",\n      children: /*#__PURE__*/_jsx(\"h1\", {\n        children: \" Profile Creation Page \"\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"flex justify-center\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"w-1/2 flex flex-col pb-12 \",\n        children: [/*#__PURE__*/_jsx(\"input\", {\n          placeholder: \"Profile username (Not your real name)\",\n          className: \"mt-8 border rounded p-4\",\n          onChange: function onChange(e) {\n            return updateFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n              name: e.target.value\n            }));\n          }\n        }), /*#__PURE__*/_jsx(\"input\", {\n          placeholder: \"Profile Quote (Write your favourite quote)\",\n          className: \"mt-8 border rounded p-4\",\n          onChange: function onChange(e) {\n            return updateFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n              description: e.target.value\n            }));\n          }\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"MintNFT\",\n          children: [/*#__PURE__*/_jsxs(\"form\", {\n            children: [/*#__PURE__*/_jsx(\"h3\", {\n              children: \"Create your Profile NFT on Polygon Mumbai & Filecoin/IPFS\"\n            }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"input\", {\n              type: \"file\",\n              onChange: handleFileUpload\n            }), /*#__PURE__*/_jsx(\"br\", {})]\n          }), /*#__PURE__*/_jsx(\"br\", {}), txStatus && /*#__PURE__*/_jsx(\"p\", {\n            children: txStatus\n          }), /*#__PURE__*/_jsx(\"br\", {}), imageView && /*#__PURE__*/_jsx(\"img\", {\n            className: \"NFTImg\",\n            src: imageView,\n            alt: \"NFT preview\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), metaDataURL && /*#__PURE__*/_jsx(\"p\", {\n            children: /*#__PURE__*/_jsx(\"a\", {\n              href: metaDataURL,\n              children: \"Metadata on IPFS\"\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), txURL && /*#__PURE__*/_jsx(\"p\", {\n            children: /*#__PURE__*/_jsx(\"a\", {\n              href: txURL,\n              children: \"See the mint transaction\"\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), errorMessage]\n        }), /*#__PURE__*/_jsx(\"button\", {\n          type: \"button\",\n          onClick: function onClick(e) {\n            return mintNFTToken(e, uploadedFile);\n          },\n          className: \"font-bold mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\",\n          children: \"Create Profile\"\n        })]\n      })\n    })]\n  });\n};\n\nexport default MintProfile;","map":null,"metadata":{},"sourceType":"module"}