{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/augustine/Dapps/DL/components/Minter.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable consistent-return */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable no-shadow */\nimport React, { useState } from \"react\"; //import { NFTStorage } from \"nft.storage\";\n\nimport { NFTStorage } from \"nft.storage/dist/bundle.esm.min.cjs\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport NFTMarketplace from \"../utils/NFTMarketplace.json\";\nimport { marketplaceAddress } from \"../../config\"; // eslint-disable-next-line max-len\n\nconst APIKEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDA4Zjc4ODAwMkUzZDAwNEIxMDI3NTFGMUQ0OTJlNmI1NjNFODE3NmMiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MzA1NjE4NzM4MCwibmFtZSI6InBlbnNpb25maSJ9.agI-2V-FeK_eVRAZ-T6KGGfE9ltWrTUQ7brFzzYVwdM\";\n\nconst MintProfile = () => {\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState(null);\n  const {\n    0: uploadedFile,\n    1: setUploadedFile\n  } = useState();\n  const {\n    0: imageView,\n    1: setImageView\n  } = useState();\n  const {\n    0: metaDataURL,\n    1: setMetaDataURl\n  } = useState();\n  const {\n    0: txURL,\n    1: setTxURL\n  } = useState();\n  const {\n    0: txStatus,\n    1: setTxStatus\n  } = useState();\n  const {\n    0: formInput,\n    1: updateFormInput\n  } = useState({\n    name: \"\",\n    description: \"\"\n  });\n\n  const handleFileUpload = event => {\n    console.log(\"file is uploaded\");\n    setUploadedFile(event.target.files[0]);\n    setTxStatus(\"\");\n    setImageView(\"\");\n    setMetaDataURl(\"\");\n    setTxURL(\"\");\n  };\n\n  const uploadNFTContent = async inputFile => {\n    const {\n      name,\n      description\n    } = formInput;\n    if (!name || !description || !inputFile) return;\n    const nftStorage = new NFTStorage({\n      token: APIKEY\n    });\n\n    try {\n      setTxStatus(\"Uploading NFT to IPFS & Filecoin via NFT.storage.\");\n      const metaData = await nftStorage.store({\n        name,\n        // \"PensionFi Profile NFT\",\n        description,\n        // \"This is PensionFi user profile Registration.\",\n        image: inputFile\n      });\n      setMetaDataURl(getIPFSGatewayURL(metaData.url));\n      console.log(\"metadata url: \", {\n        metaData\n      });\n      return metaData;\n    } catch (error) {\n      setErrorMessage(\"Could not save NFT to NFT.Storage - Aborted minting.\");\n      console.log(\"Error Uploading Content\", error);\n    }\n  };\n\n  const sendTxToBlockchain = async metadata => {\n    try {\n      setTxStatus(\"Sending mint transaction to Polygon Mumbai Blockchain.\");\n      const web3Modal = new Web3Modal();\n      const connection = await web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(connection);\n      const connectedContract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, provider.getSigner());\n      const mintNFTTx = await connectedContract.createToken(metadata.url);\n      return mintNFTTx;\n    } catch (error) {\n      setErrorMessage(\"Failed to send tx to Polygon Mumbai.\");\n      console.log(error);\n    }\n  };\n\n  const previewNFT = (metaData, mintNFTTx) => {\n    const imgViewString = getIPFSGatewayURL(metaData.data.image.pathname);\n    setImageView(imgViewString);\n    setMetaDataURl(getIPFSGatewayURL(metaData.url));\n    setTxURL(`https://mumbai.polygonscan.com/tx/${mintNFTTx.hash}`);\n    setTxStatus(\"Profile created successfully!\");\n  };\n\n  const mintNFTToken = async (event, uploadedFile) => {\n    event.preventDefault(); // 1. upload NFT content via NFT.storage\n\n    const metaData = await uploadNFTContent(uploadedFile); // 2. Mint a NFT token on Harmony\n\n    const mintNFTTx = await sendTxToBlockchain(metaData); // 3. preview the minted nft\n\n    previewNFT(metaData, mintNFTTx);\n  };\n\n  const getIPFSGatewayURL = ipfsURL => {\n    const urlArray = ipfsURL.split(\"/\");\n    const ipfsGateWayURL = `https://${urlArray[2]}.ipfs.dweb.link/${urlArray[3]}`;\n    return ipfsGateWayURL;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-4xl text-center text-white font-bold mt-10 mb-20\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Profile Creation Page \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/2 flex flex-col pb-12 \",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Profile username (Not your real name)\",\n          className: \"mt-8 border rounded p-4\",\n          onChange: e => updateFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n            name: e.target.value\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Profile Quote (Write your favourite quote)\",\n          className: \"mt-8 border rounded p-4\",\n          onChange: e => updateFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n            description: e.target.value\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"MintNFT\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Create your Profile NFT on Polygon Mumbai & Filecoin/IPFS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: handleFileUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), txStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: txStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), imageView && /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"NFTImg\",\n            src: imageView,\n            alt: \"NFT preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), metaDataURL && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: metaDataURL,\n              children: \"Metadata on IPFS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), txURL && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: txURL,\n              children: \"See the mint transaction\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 26\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), errorMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: e => mintNFTToken(e, uploadedFile),\n          className: \"font-bold mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\",\n          children: \"Create Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default MintProfile;","map":{"version":3,"sources":["/home/augustine/Dapps/DL/components/Minter.js"],"names":["React","useState","NFTStorage","ethers","Web3Modal","NFTMarketplace","marketplaceAddress","APIKEY","MintProfile","errorMessage","setErrorMessage","uploadedFile","setUploadedFile","imageView","setImageView","metaDataURL","setMetaDataURl","txURL","setTxURL","txStatus","setTxStatus","formInput","updateFormInput","name","description","handleFileUpload","event","console","log","target","files","uploadNFTContent","inputFile","nftStorage","token","metaData","store","image","getIPFSGatewayURL","url","error","sendTxToBlockchain","metadata","web3Modal","connection","connect","provider","providers","Web3Provider","connectedContract","Contract","abi","getSigner","mintNFTTx","createToken","previewNFT","imgViewString","data","pathname","hash","mintNFTToken","preventDefault","ipfsURL","urlArray","split","ipfsGateWayURL","e","value"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-shadow */\nimport React, { useState } from \"react\";\n//import { NFTStorage } from \"nft.storage\";\nimport { NFTStorage } from \"nft.storage/dist/bundle.esm.min.cjs\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport NFTMarketplace from \"../utils/NFTMarketplace.json\";\nimport { marketplaceAddress } from \"../../config\";\n\n// eslint-disable-next-line max-len\nconst APIKEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDA4Zjc4ODAwMkUzZDAwNEIxMDI3NTFGMUQ0OTJlNmI1NjNFODE3NmMiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MzA1NjE4NzM4MCwibmFtZSI6InBlbnNpb25maSJ9.agI-2V-FeK_eVRAZ-T6KGGfE9ltWrTUQ7brFzzYVwdM\";\n\nconst MintProfile = () => {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [uploadedFile, setUploadedFile] = useState();\n  const [imageView, setImageView] = useState();\n  const [metaDataURL, setMetaDataURl] = useState();\n  const [txURL, setTxURL] = useState();\n  const [txStatus, setTxStatus] = useState();\n  const [formInput, updateFormInput] = useState({ name: \"\", description: \"\" });\n\n  const handleFileUpload = (event) => {\n    console.log(\"file is uploaded\");\n    setUploadedFile(event.target.files[0]);\n    setTxStatus(\"\");\n    setImageView(\"\");\n    setMetaDataURl(\"\");\n    setTxURL(\"\");\n  };\n\n  const uploadNFTContent = async (inputFile) => {\n    const { name, description } = formInput;\n    if (!name || !description || !inputFile) return;\n    const nftStorage = new NFTStorage({ token: APIKEY, });\n    try {\n      setTxStatus(\"Uploading NFT to IPFS & Filecoin via NFT.storage.\");\n      const metaData = await nftStorage.store({\n        name, // \"PensionFi Profile NFT\",\n        description, // \"This is PensionFi user profile Registration.\",\n        image: inputFile\n      });\n      setMetaDataURl(getIPFSGatewayURL(metaData.url));\n      console.log(\"metadata url: \", { metaData });\n      return metaData;\n    } catch (error) {\n      setErrorMessage(\"Could not save NFT to NFT.Storage - Aborted minting.\");\n      console.log(\"Error Uploading Content\", error);\n    }\n  };\n\n  const sendTxToBlockchain = async (metadata) => {\n    try {\n      setTxStatus(\"Sending mint transaction to Polygon Mumbai Blockchain.\");\n      const web3Modal = new Web3Modal();\n      const connection = await web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(connection);\n      const connectedContract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, provider.getSigner());\n      const mintNFTTx = await connectedContract.createToken(metadata.url);\n      return mintNFTTx;\n    } catch (error) {\n      setErrorMessage(\"Failed to send tx to Polygon Mumbai.\");\n      console.log(error);\n    }\n  };\n\n  const previewNFT = (metaData, mintNFTTx) => {\n    const imgViewString = getIPFSGatewayURL(metaData.data.image.pathname);\n    setImageView(imgViewString);\n    setMetaDataURl(getIPFSGatewayURL(metaData.url));\n    setTxURL(`https://mumbai.polygonscan.com/tx/${mintNFTTx.hash}`);\n    setTxStatus(\"Profile created successfully!\");\n  };\n\n  const mintNFTToken = async (event, uploadedFile) => {\n    event.preventDefault();\n    // 1. upload NFT content via NFT.storage\n    const metaData = await uploadNFTContent(uploadedFile);\n\n    // 2. Mint a NFT token on Harmony\n    const mintNFTTx = await sendTxToBlockchain(metaData);\n\n    // 3. preview the minted nft\n    previewNFT(metaData, mintNFTTx);\n  };\n\n  const getIPFSGatewayURL = (ipfsURL) => {\n    const urlArray = ipfsURL.split(\"/\");\n    const ipfsGateWayURL = `https://${urlArray[2]}.ipfs.dweb.link/${urlArray[3]}`;\n    return ipfsGateWayURL;\n  };\n\n  return (\n    <>\n      <div className=\"text-4xl text-center text-white font-bold mt-10 mb-20\">\n        <h1> Profile Creation Page </h1>\n      </div>\n      <div className=\"flex justify-center\">\n        <div className=\"w-1/2 flex flex-col pb-12 \">\n          <input\n            placeholder=\"Profile username (Not your real name)\"\n            className=\"mt-8 border rounded p-4\"\n            onChange={(e) => updateFormInput({ ...formInput, name: e.target.value })}\n          />\n          <input\n            placeholder=\"Profile Quote (Write your favourite quote)\"\n            className=\"mt-8 border rounded p-4\"\n            onChange={(e) => updateFormInput({ ...formInput, description: e.target.value })}\n          />\n          <br />\n\n          <div className=\"MintNFT\">\n            <form>\n              <h3>Create your Profile NFT on Polygon Mumbai & Filecoin/IPFS</h3>\n              <br />\n              <input type=\"file\" onChange={handleFileUpload} />\n              <br />\n            </form>\n            <br />\n            {txStatus && <p>{txStatus}</p>}\n            <br />\n            {imageView && <img className=\"NFTImg\" src={imageView} alt=\"NFT preview\" />}\n            <br />\n            {metaDataURL && <p><a href={metaDataURL}>Metadata on IPFS</a></p>}\n            <br />\n            {txURL && <p><a href={txURL}>See the mint transaction</a></p>}\n            <br />\n            {errorMessage}\n          </div>\n\n          <button type=\"button\" onClick={(e) => mintNFTToken(e, uploadedFile)} className=\"font-bold mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\">\n            Create Profile\n          </button>\n        </div>\n      </div>\n    </>\n\n  );\n};\nexport default MintProfile;\n"]},"metadata":{},"sourceType":"module"}