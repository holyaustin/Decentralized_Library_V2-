{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable consistent-return */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable no-shadow */\nimport React, { useState } from \"react\"; //import { NFTStorage } from \"nft.storage\";\n\nimport { NFTStorage } from \"nft.storage/dist/bundle.esm.min.cjs\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\"; // import NFTMarketplace from \"../utils/NFTMarketplace.json\";\n\nimport { marketplaceAddress } from \"../config\"; // eslint-disable-next-line max-len\n\nconst APIKEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDA4Zjc4ODAwMkUzZDAwNEIxMDI3NTFGMUQ0OTJlNmI1NjNFODE3NmMiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MzA1NjE4NzM4MCwibmFtZSI6InBlbnNpb25maSJ9.agI-2V-FeK_eVRAZ-T6KGGfE9ltWrTUQ7brFzzYVwdM\";\n\nconst MintProfile = () => {\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState(null);\n  const {\n    0: uploadedFile,\n    1: setUploadedFile\n  } = useState();\n  const {\n    0: imageView,\n    1: setImageView\n  } = useState();\n  const {\n    0: metaDataURL,\n    1: setMetaDataURl\n  } = useState();\n  const {\n    0: txURL,\n    1: setTxURL\n  } = useState();\n  const {\n    0: txStatus,\n    1: setTxStatus\n  } = useState();\n  const {\n    0: formInput,\n    1: updateFormInput\n  } = useState({\n    name: \"\",\n    description: \"\"\n  });\n\n  const handleFileUpload = event => {\n    console.log(\"file is uploaded\");\n    setUploadedFile(event.target.files[0]);\n    setTxStatus(\"\");\n    setImageView(\"\");\n    setMetaDataURl(\"\");\n    setTxURL(\"\");\n  };\n\n  const uploadNFTContent = async inputFile => {\n    const {\n      name,\n      description\n    } = formInput;\n    if (!name || !description || !inputFile) return;\n    const nftStorage = new NFTStorage({\n      token: APIKEY\n    });\n\n    try {\n      setTxStatus(\"Uploading NFT to IPFS & Filecoin via NFT.storage.\");\n      const metaData = await nftStorage.store({\n        name,\n        // \"PensionFi Profile NFT\",\n        description,\n        // \"This is PensionFi user profile Registration.\",\n        image: inputFile\n      });\n      setMetaDataURl(getIPFSGatewayURL(metaData.url));\n      console.log(\"metadata url: \", {\n        metaData\n      });\n      return metaData;\n    } catch (error) {\n      setErrorMessage(\"Could not save NFT to NFT.Storage - Aborted minting.\");\n      console.log(\"Error Uploading Content\", error);\n    }\n  };\n\n  const sendTxToBlockchain = async metadata => {\n    try {\n      setTxStatus(\"Sending mint transaction to Polygon Mumbai Blockchain.\");\n      const web3Modal = new Web3Modal();\n      const connection = await web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(connection);\n      const connectedContract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, provider.getSigner());\n      const mintNFTTx = await connectedContract.createToken(metadata.url);\n      return mintNFTTx;\n    } catch (error) {\n      setErrorMessage(\"Failed to send tx to Polygon Mumbai.\");\n      console.log(error);\n    }\n  };\n\n  const previewNFT = (metaData, mintNFTTx) => {\n    const imgViewString = getIPFSGatewayURL(metaData.data.image.pathname);\n    setImageView(imgViewString);\n    setMetaDataURl(getIPFSGatewayURL(metaData.url));\n    setTxURL(`https://mumbai.polygonscan.com/tx/${mintNFTTx.hash}`);\n    setTxStatus(\"Profile created successfully!\");\n  };\n\n  const mintNFTToken = async (event, uploadedFile) => {\n    event.preventDefault(); // 1. upload NFT content via NFT.storage\n\n    const metaData = await uploadNFTContent(uploadedFile); // 2. Mint a NFT token on Harmony\n\n    const mintNFTTx = await sendTxToBlockchain(metaData); // 3. preview the minted nft\n\n    previewNFT(metaData, mintNFTTx);\n  };\n\n  const getIPFSGatewayURL = ipfsURL => {\n    const urlArray = ipfsURL.split(\"/\");\n    const ipfsGateWayURL = `https://${urlArray[2]}.ipfs.dweb.link/${urlArray[3]}`;\n    return ipfsGateWayURL;\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"text-4xl text-center text-white font-bold mt-10 mb-20\",\n      children: /*#__PURE__*/_jsx(\"h1\", {\n        children: \" Profile Creation Page \"\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"flex justify-center\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"w-1/2 flex flex-col pb-12 \",\n        children: [/*#__PURE__*/_jsx(\"input\", {\n          placeholder: \"Profile username (Not your real name)\",\n          className: \"mt-8 border rounded p-4\",\n          onChange: e => updateFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n            name: e.target.value\n          }))\n        }), /*#__PURE__*/_jsx(\"input\", {\n          placeholder: \"Profile Quote (Write your favourite quote)\",\n          className: \"mt-8 border rounded p-4\",\n          onChange: e => updateFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n            description: e.target.value\n          }))\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"MintNFT\",\n          children: [/*#__PURE__*/_jsxs(\"form\", {\n            children: [/*#__PURE__*/_jsx(\"h3\", {\n              children: \"Create your Profile NFT on Polygon Mumbai & Filecoin/IPFS\"\n            }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"input\", {\n              type: \"file\",\n              onChange: handleFileUpload\n            }), /*#__PURE__*/_jsx(\"br\", {})]\n          }), /*#__PURE__*/_jsx(\"br\", {}), txStatus && /*#__PURE__*/_jsx(\"p\", {\n            children: txStatus\n          }), /*#__PURE__*/_jsx(\"br\", {}), imageView && /*#__PURE__*/_jsx(\"img\", {\n            className: \"NFTImg\",\n            src: imageView,\n            alt: \"NFT preview\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), metaDataURL && /*#__PURE__*/_jsx(\"p\", {\n            children: /*#__PURE__*/_jsx(\"a\", {\n              href: metaDataURL,\n              children: \"Metadata on IPFS\"\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), txURL && /*#__PURE__*/_jsx(\"p\", {\n            children: /*#__PURE__*/_jsx(\"a\", {\n              href: txURL,\n              children: \"See the mint transaction\"\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), errorMessage]\n        }), /*#__PURE__*/_jsx(\"button\", {\n          type: \"button\",\n          onClick: e => mintNFTToken(e, uploadedFile),\n          className: \"font-bold mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\",\n          children: \"Create Profile\"\n        })]\n      })\n    })]\n  });\n};\n\nexport default MintProfile;","map":null,"metadata":{},"sourceType":"module"}