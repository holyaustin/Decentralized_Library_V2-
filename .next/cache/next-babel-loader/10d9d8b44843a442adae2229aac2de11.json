{"ast":null,"code":"import _defineProperty from \"/home/augustine/Dapps/DL/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/augustine/Dapps/DL/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/augustine/Dapps/DL/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/augustine/Dapps/DL/components/Minter.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable consistent-return */\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable no-shadow */\nimport React, { useState } from \"react\"; //import { NFTStorage } from \"nft.storage\";\n\nimport { NFTStorage } from \"nft.storage/dist/bundle.esm.min.cjs\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport NFTMarketplace from \"../utils/NFTMarketplace.json\"; // import { marketplaceAddress } from \"../../config\";\n// eslint-disable-next-line max-len\n\nvar APIKEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDA4Zjc4ODAwMkUzZDAwNEIxMDI3NTFGMUQ0OTJlNmI1NjNFODE3NmMiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MzA1NjE4NzM4MCwibmFtZSI6InBlbnNpb25maSJ9.agI-2V-FeK_eVRAZ-T6KGGfE9ltWrTUQ7brFzzYVwdM\";\n\nvar MintProfile = function MintProfile() {\n  _s();\n\n  var _useState = useState(null),\n      errorMessage = _useState[0],\n      setErrorMessage = _useState[1];\n\n  var _useState2 = useState(),\n      uploadedFile = _useState2[0],\n      setUploadedFile = _useState2[1];\n\n  var _useState3 = useState(),\n      imageView = _useState3[0],\n      setImageView = _useState3[1];\n\n  var _useState4 = useState(),\n      metaDataURL = _useState4[0],\n      setMetaDataURl = _useState4[1];\n\n  var _useState5 = useState(),\n      txURL = _useState5[0],\n      setTxURL = _useState5[1];\n\n  var _useState6 = useState(),\n      txStatus = _useState6[0],\n      setTxStatus = _useState6[1];\n\n  var _useState7 = useState({\n    name: \"\",\n    description: \"\"\n  }),\n      formInput = _useState7[0],\n      updateFormInput = _useState7[1];\n\n  var handleFileUpload = function handleFileUpload(event) {\n    console.log(\"file is uploaded\");\n    setUploadedFile(event.target.files[0]);\n    setTxStatus(\"\");\n    setImageView(\"\");\n    setMetaDataURl(\"\");\n    setTxURL(\"\");\n  };\n\n  var uploadNFTContent = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(inputFile) {\n      var name, description, nftStorage, metaData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = formInput.name, description = formInput.description;\n\n              if (!(!name || !description || !inputFile)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              nftStorage = new NFTStorage({\n                token: APIKEY\n              });\n              _context.prev = 4;\n              setTxStatus(\"Uploading NFT to IPFS & Filecoin via NFT.storage.\");\n              _context.next = 8;\n              return nftStorage.store({\n                name: name,\n                // \"PensionFi Profile NFT\",\n                description: description,\n                // \"This is PensionFi user profile Registration.\",\n                image: inputFile\n              });\n\n            case 8:\n              metaData = _context.sent;\n              setMetaDataURl(getIPFSGatewayURL(metaData.url));\n              console.log(\"metadata url: \", {\n                metaData: metaData\n              });\n              return _context.abrupt(\"return\", metaData);\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](4);\n              setErrorMessage(\"Could not save NFT to NFT.Storage - Aborted minting.\");\n              console.log(\"Error Uploading Content\", _context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 14]]);\n    }));\n\n    return function uploadNFTContent(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var sendTxToBlockchain = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(metadata) {\n      var web3Modal, connection, provider, connectedContract, mintNFTTx;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              setTxStatus(\"Sending mint transaction to Polygon Mumbai Blockchain.\");\n              web3Modal = new Web3Modal();\n              _context2.next = 5;\n              return web3Modal.connect();\n\n            case 5:\n              connection = _context2.sent;\n              provider = new ethers.providers.Web3Provider(connection);\n              connectedContract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, provider.getSigner());\n              _context2.next = 10;\n              return connectedContract.createToken(metadata.url);\n\n            case 10:\n              mintNFTTx = _context2.sent;\n              return _context2.abrupt(\"return\", mintNFTTx);\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              setErrorMessage(\"Failed to send tx to Polygon Mumbai.\");\n              console.log(_context2.t0);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 14]]);\n    }));\n\n    return function sendTxToBlockchain(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var previewNFT = function previewNFT(metaData, mintNFTTx) {\n    var imgViewString = getIPFSGatewayURL(metaData.data.image.pathname);\n    setImageView(imgViewString);\n    setMetaDataURl(getIPFSGatewayURL(metaData.url));\n    setTxURL(\"https://mumbai.polygonscan.com/tx/\".concat(mintNFTTx.hash));\n    setTxStatus(\"Profile created successfully!\");\n  };\n\n  var mintNFTToken = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event, uploadedFile) {\n      var metaData, mintNFTTx;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              event.preventDefault(); // 1. upload NFT content via NFT.storage\n\n              _context3.next = 3;\n              return uploadNFTContent(uploadedFile);\n\n            case 3:\n              metaData = _context3.sent;\n              _context3.next = 6;\n              return sendTxToBlockchain(metaData);\n\n            case 6:\n              mintNFTTx = _context3.sent;\n              // 3. preview the minted nft\n              previewNFT(metaData, mintNFTTx);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function mintNFTToken(_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getIPFSGatewayURL = function getIPFSGatewayURL(ipfsURL) {\n    var urlArray = ipfsURL.split(\"/\");\n    var ipfsGateWayURL = \"https://\".concat(urlArray[2], \".ipfs.dweb.link/\").concat(urlArray[3]);\n    return ipfsGateWayURL;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-4xl text-center text-white font-bold mt-10 mb-20\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Profile Creation Page \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/2 flex flex-col pb-12 \",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Profile username (Not your real name)\",\n          className: \"mt-8 border rounded p-4\",\n          onChange: function onChange(e) {\n            return updateFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n              name: e.target.value\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Profile Quote (Write your favourite quote)\",\n          className: \"mt-8 border rounded p-4\",\n          onChange: function onChange(e) {\n            return updateFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n              description: e.target.value\n            }));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"MintNFT\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Create your Profile NFT on Polygon Mumbai & Filecoin/IPFS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              onChange: handleFileUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, _this), txStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: txStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 26\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, _this), imageView && /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"NFTImg\",\n            src: imageView,\n            alt: \"NFT preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 27\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, _this), metaDataURL && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: metaDataURL,\n              children: \"Metadata on IPFS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 32\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, _this), txURL && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: txURL,\n              children: \"See the mint transaction\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 26\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 23\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, _this), errorMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: function onClick(e) {\n            return mintNFTToken(e, uploadedFile);\n          },\n          className: \"font-bold mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\",\n          children: \"Create Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(MintProfile, \"a5zGWln6mjMww9/8xxKniHuiB+o=\");\n\n_c = MintProfile;\nexport default MintProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintProfile\");","map":{"version":3,"sources":["/home/augustine/Dapps/DL/components/Minter.js"],"names":["React","useState","NFTStorage","ethers","Web3Modal","NFTMarketplace","APIKEY","MintProfile","errorMessage","setErrorMessage","uploadedFile","setUploadedFile","imageView","setImageView","metaDataURL","setMetaDataURl","txURL","setTxURL","txStatus","setTxStatus","name","description","formInput","updateFormInput","handleFileUpload","event","console","log","target","files","uploadNFTContent","inputFile","nftStorage","token","store","image","metaData","getIPFSGatewayURL","url","sendTxToBlockchain","metadata","web3Modal","connect","connection","provider","providers","Web3Provider","connectedContract","Contract","marketplaceAddress","abi","getSigner","createToken","mintNFTTx","previewNFT","imgViewString","data","pathname","hash","mintNFTToken","preventDefault","ipfsURL","urlArray","split","ipfsGateWayURL","e","value"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-shadow */\nimport React, { useState } from \"react\";\n//import { NFTStorage } from \"nft.storage\";\nimport { NFTStorage } from \"nft.storage/dist/bundle.esm.min.cjs\";\nimport { ethers } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport NFTMarketplace from \"../utils/NFTMarketplace.json\";\n// import { marketplaceAddress } from \"../../config\";\n\n// eslint-disable-next-line max-len\nconst APIKEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDA4Zjc4ODAwMkUzZDAwNEIxMDI3NTFGMUQ0OTJlNmI1NjNFODE3NmMiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MzA1NjE4NzM4MCwibmFtZSI6InBlbnNpb25maSJ9.agI-2V-FeK_eVRAZ-T6KGGfE9ltWrTUQ7brFzzYVwdM\";\n\nconst MintProfile = () => {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [uploadedFile, setUploadedFile] = useState();\n  const [imageView, setImageView] = useState();\n  const [metaDataURL, setMetaDataURl] = useState();\n  const [txURL, setTxURL] = useState();\n  const [txStatus, setTxStatus] = useState();\n  const [formInput, updateFormInput] = useState({ name: \"\", description: \"\" });\n\n  const handleFileUpload = (event) => {\n    console.log(\"file is uploaded\");\n    setUploadedFile(event.target.files[0]);\n    setTxStatus(\"\");\n    setImageView(\"\");\n    setMetaDataURl(\"\");\n    setTxURL(\"\");\n  };\n\n  const uploadNFTContent = async (inputFile) => {\n    const { name, description } = formInput;\n    if (!name || !description || !inputFile) return;\n    const nftStorage = new NFTStorage({ token: APIKEY, });\n    try {\n      setTxStatus(\"Uploading NFT to IPFS & Filecoin via NFT.storage.\");\n      const metaData = await nftStorage.store({\n        name, // \"PensionFi Profile NFT\",\n        description, // \"This is PensionFi user profile Registration.\",\n        image: inputFile\n      });\n      setMetaDataURl(getIPFSGatewayURL(metaData.url));\n      console.log(\"metadata url: \", { metaData });\n      return metaData;\n    } catch (error) {\n      setErrorMessage(\"Could not save NFT to NFT.Storage - Aborted minting.\");\n      console.log(\"Error Uploading Content\", error);\n    }\n  };\n\n  const sendTxToBlockchain = async (metadata) => {\n    try {\n      setTxStatus(\"Sending mint transaction to Polygon Mumbai Blockchain.\");\n      const web3Modal = new Web3Modal();\n      const connection = await web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(connection);\n      const connectedContract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, provider.getSigner());\n      const mintNFTTx = await connectedContract.createToken(metadata.url);\n      return mintNFTTx;\n    } catch (error) {\n      setErrorMessage(\"Failed to send tx to Polygon Mumbai.\");\n      console.log(error);\n    }\n  };\n\n  const previewNFT = (metaData, mintNFTTx) => {\n    const imgViewString = getIPFSGatewayURL(metaData.data.image.pathname);\n    setImageView(imgViewString);\n    setMetaDataURl(getIPFSGatewayURL(metaData.url));\n    setTxURL(`https://mumbai.polygonscan.com/tx/${mintNFTTx.hash}`);\n    setTxStatus(\"Profile created successfully!\");\n  };\n\n  const mintNFTToken = async (event, uploadedFile) => {\n    event.preventDefault();\n    // 1. upload NFT content via NFT.storage\n    const metaData = await uploadNFTContent(uploadedFile);\n\n    // 2. Mint a NFT token on Harmony\n    const mintNFTTx = await sendTxToBlockchain(metaData);\n\n    // 3. preview the minted nft\n    previewNFT(metaData, mintNFTTx);\n  };\n\n  const getIPFSGatewayURL = (ipfsURL) => {\n    const urlArray = ipfsURL.split(\"/\");\n    const ipfsGateWayURL = `https://${urlArray[2]}.ipfs.dweb.link/${urlArray[3]}`;\n    return ipfsGateWayURL;\n  };\n\n  return (\n    <>\n      <div className=\"text-4xl text-center text-white font-bold mt-10 mb-20\">\n        <h1> Profile Creation Page </h1>\n      </div>\n      <div className=\"flex justify-center\">\n        <div className=\"w-1/2 flex flex-col pb-12 \">\n          <input\n            placeholder=\"Profile username (Not your real name)\"\n            className=\"mt-8 border rounded p-4\"\n            onChange={(e) => updateFormInput({ ...formInput, name: e.target.value })}\n          />\n          <input\n            placeholder=\"Profile Quote (Write your favourite quote)\"\n            className=\"mt-8 border rounded p-4\"\n            onChange={(e) => updateFormInput({ ...formInput, description: e.target.value })}\n          />\n          <br />\n\n          <div className=\"MintNFT\">\n            <form>\n              <h3>Create your Profile NFT on Polygon Mumbai & Filecoin/IPFS</h3>\n              <br />\n              <input type=\"file\" onChange={handleFileUpload} />\n              <br />\n            </form>\n            <br />\n            {txStatus && <p>{txStatus}</p>}\n            <br />\n            {imageView && <img className=\"NFTImg\" src={imageView} alt=\"NFT preview\" />}\n            <br />\n            {metaDataURL && <p><a href={metaDataURL}>Metadata on IPFS</a></p>}\n            <br />\n            {txURL && <p><a href={txURL}>See the mint transaction</a></p>}\n            <br />\n            {errorMessage}\n          </div>\n\n          <button type=\"button\" onClick={(e) => mintNFTToken(e, uploadedFile)} className=\"font-bold mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\">\n            Create Profile\n          </button>\n        </div>\n      </div>\n    </>\n\n  );\n};\nexport default MintProfile;\n"]},"metadata":{},"sourceType":"module"}